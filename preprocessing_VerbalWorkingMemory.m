%% == License ==========================================================
% This file is part of the project megFingerprinting. All of
% megFingerprinting code is free software: you can redistribute
% it and/or modify it under the terms of the GNU General Public License as
% published by the Free Software Foundation,
% either version 3 of the License, or (at your option) any later version.
% megFingerprinting is distributed in the hope that it will be useful, but
% WITHOUT ANY WARRANTY; without even the
% implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
% See the GNU General Public License for
% more details. You should have received a copy of the GNU General Public
% License along with megFingerprinting.
% If not, see <https://www.gnu.org/licenses/>.

%% == VerbalWorkingMemory Preprocessing ==================================
% Based on OMEGA's preprocessing script by Guiomar Niso (26 May 2016)



%% == Initiate Brainstorm and protocol setup =============================
clc; clear;

cd '/media/jdscasta/Elements/'

if ~brainstorm('status')
    brainstorm nogui % If brainstorm ain't running, run it with no GUI
end

% Create protocol; if it already exists, load it
omProtocol.name = 'WERKIN_Memory';
if exist('/media/jdscasta/Elements/WERKIN_Memory', 'file') == 7
    omProtocol.index = bst_get('Protocol', omProtocol.name);
    bst_set('iProtocol', omProtocol.index);
    
else
    gui_brainstorm('CreateProtocol', omProtocol.name, 1, 0);
end

%% == Parameters =========================================================
% MEG datasets storage
mydirMEG = '/media/jdscasta/Elements/VerbalWM_data/';

% Dir to save progress report
mydirBST = '/media/jdscasta/Elements/VERBALWM_reports/';

% Dir of database
mydirDB = '/media/jdscasta/Elements/WERKIN_Memory/data/';

% Frequencies to filter with the noth (power line 50Hz and harmonics)
freqs_notch = [50, 100];

% Filters
filt.highpass = 0.3;
filt.lowpass = 0.; % 0: no filter

% Window length and overlap for PSD Welch method
win_length = 2; % sec
win_overlap = 50; % percentage



files=dir('/media/jdscasta/Elements/VerbalWM_data/sub*/eeg/*.set');
subjectname=dir('/media/jdscasta/Elements/VerbalWM_data/sub*');

sFiles = [];


firstSubject = 1;
lastSubject = 5;

for i = firstSubject:lastSubject
    db_reload_database('current');
    [sSubject{i}, iSubject] = db_add_subject(subjectname(i).name);
end
      
db_reload_database('current');
    
    
for i = firstSubject:lastSubject
    % Process: Create link to raw file
sFiles = bst_process('CallProcess', 'process_import_data_raw',sFiles, [], ...
    'subjectname',    subjectname(i).name, ...
    'datafile',      {strcat(files(i,1).folder, '/', files(i,1).name), 'EEG-EEGLAB'} , ...
    'evtmode',        'value');

end


sSubjects = bst_get('ProtocolSubjects');
SubjectNames = {sSubjects.Subject.Name}';

db_reload_database('current')

for iSubject=1:nSubjects
    tic
    % Start a new report
    reportName = [SubjectNames{iSubject} '_report'];
    bst_report('Start', reportName);
    sessions = dir([mydirMEG '/' SubjectNames{iSubject}]);
    sessions = sessions(3:end); % Start from 3, because Linux
    nSessions = numel(sessions);
    
    % for iSession = 1:nSessions % Only analyzing session 1 for everyone!
    fprintf(['Now processing: ' SubjectNames{iSubject} '\n'])
    
    % Process: select data
    sData = bst_process('CallProcess', 'process_select_files_data', ...
        [], [], 'subjectname',   SubjectNames{iSubject});
    

    %% == 4) preProcessing PSD on sensors ============================
    % Process: Power spectrum density (Welch) pre-filtering
    sFilesPSDpre = bst_process('CallProcess', 'process_psd', ...
        sData, [], ...
        'timewindow', [], ...
        'win_length', win_length, ...
        'win_overlap', win_overlap, ...
        'sensortypes', 'MEG, EEG', ...
        'edit', struct(...
        'Comment', 'Power', ...
        'TimeBands', [], ...
        'Freqs', [], ...
        'ClusterFuncTime', 'none', ...
        'Measure', 'power', ...
        'Output', 'all', ...
        'SaveKernel', 0));


    % Process: Merge events
    sFilesPSDpre = bst_process('CallProcess', 'process_evt_merge', sFilesPSDpre, [], ...
        'evtnames', 'probe: 5R, probe: 6R,probe: 7R', ...
        'newname',  'Probe_R');
    
    sFilesPSDpre = bst_process('CallProcess', 'process_evt_merge', sFilesPSDpre, [], ...
        'evtnames', 'probe: 5M, probe: 6M,probe: 7M', ...
        'newname',  'Probe_M');


    
    %% == 5) Filtering: Line noise and high pass =====================
    % Process: Notch filter: 50Hz 100Hz
    sFilesNotch = bst_process('CallProcess', 'process_notch', sFilesPSDpre, [], ...
        'sensortypes', 'EEG', ...
        'freqlist',    freqs_notch, ...
        'cutoffW',     1, ...
        'useold',      0, ...
        'read_all',    1);

    
    % Process: High-pass:0.3Hz
    sFiles = bst_process('CallProcess', 'process_bandpass', sFilesNotch, [], ...
    'sensortypes', ' EEG', ...
    'highpass',    filt.highpass, ...
    'lowpass',     filt.lowpass, ...
    'tranband',    0, ...
    'attenuation', 'strict', ...  % 60dB
    'ver',         '2019', ...  % 2019
    'mirror',      0, ...
    'read_all',    0);

    
    
    %% == 6) SSP: EOG and ECG ========================================

    % SSP detect and remove blinks per run
    for iRun=1:numel(sFiles)
        % Read the channel file
        ChannelMat = in_bst_channel(sFilesRESTING(iRun).ChannelFile);
        
        % Look for ECG channel
        iChannelECG = channel_find(ChannelMat.Channel, 'ECG');
        
        % Look for EOG channel
        iChannelVEOG = channel_find(ChannelMat.Channel, 'EOGv');
        
        
        % Process: Detect eye blinks
        if ~isempty(iChannelVEOG)
            bst_process('CallProcess', 'process_evt_detect_eog', ...
                sFilesRESTING(iRun), [], ...
                'channelname', ChannelMat.Channel(iChannelVEOG).Name, ...
                'timewindow', [], ...
                'eventname', 'blink');
        else
            disp('No EOG channel found!')
        end
    end
    
    
    % Process: SSP EOG (blink) force remove 1st component
    bst_process('CallProcess', 'process_ssp_eog', ...
        sFilesRESTING, [], ...
        'eventname', 'blink', ...
        'sensortypes', 'EEG', ...
        'usessp', 1, ...
        'select', 1);

    %% == 7) postProcessing PSD on sensors ===========================
    % Process: Power spectrum density (Welch)
    sFilesPSDpost = bst_process('CallProcess', 'process_psd', ...
        sFilesRESTING, [], ...
        'timewindow', [], ...
        'win_length', win_length, ...
        'win_overlap', win_overlap, ...
        'sensortypes', 'EEG', ...
        'edit', struct(...
        'Comment', 'Power', ...
        'TimeBands', [], ...
        'Freqs', [], ...
        'ClusterFuncTime', 'none', ...
        'Measure', 'power', ...
        'Output', 'all', ...
        'SaveKernel', 0));
    
    
    %% == 8) SSP: Sacades and EMG ====================================
    % Process: Detect other artifacts (mark noisy segments)
    bst_process('CallProcess', 'process_evt_detect_badsegment', ...
        sFilesRESTING, [], ...
        'timewindow', [], ...
        'sensortypes', 'EEG', ...
        'threshold', 3, ...  % 3
        'isLowFreq', 1, ...
        'isHighFreq', 1);
    
    % Process: SSP for low frequencies (saccades) 1 - 7 Hz (remove 1st)
    bst_process('CallProcess', 'process_ssp', ...
        sFilesRESTING, [], ...
        'timewindow',  [], ...
        'eventname',   '1-7Hz', ...
        'eventtime',   [], ...
        'bandpass',    [1, 7], ...
        'sensortypes', 'EEG', ...
        'usessp',      1, ...
        'saveerp',     0, ...
        'method',      1, ...  % PCA: One component per sensor
        'select',      1);
    
        %% == 7) postProcessing PSD on sensors ===========================
    % Process: Power spectrum density (Welch)
    sFilesPSDpost = bst_process('CallProcess', 'process_psd', ...
        sFilesRESTING, [], ...
        'timewindow', [], ...
        'win_length', win_length, ...
        'win_overlap', win_overlap, ...
        'sensortypes', 'EEG', ...
        'edit', struct(...
        'Comment', 'Power', ...
        'TimeBands', [], ...
        'Freqs', [], ...
        'ClusterFuncTime', 'none', ...
        'Measure', 'power', ...
        'Output', 'all', ...
        'SaveKernel', 0));
    
    % Process: Import MEG/EEG: Events
imported_data = bst_process('CallProcess', 'process_import_data_event', sFiles, [], ...
    'subjectname', sFilesPSDpost, ...
    'condition',   '', ...
    'eventname',   'Probe_R, Probe_M', ...
    'timewindow',  [], ...
    'epochtime',   [-0.1, 0.3], ...
    'createcond',  1, ...
    'ignoreshort', 0, ...
    'usectfcomp',  1, ...
    'usessp',      1, ...
    'freq',        [], ...
    'baseline',    []);

    % Process: Time-frequency (Morlet wavelets)
sWavelet = bst_process('CallProcess', 'process_timefreq', imported_data, [], ...
    'sensortypes',   'EEG', ...
    'edit',          struct(...
         'Comment',         'Power,1-50Hz', ...
         'TimeBands',       [], ...
         'Freqs',           [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50], ...
         'MorletFc',        1, ...
         'MorletFwhmTc',    3, ...
         'ClusterFuncTime', 'none', ...
         'Measure',         'power', ...
         'Output',          'all', ...
         'SaveKernel',      0), ...
    'normalize2020', 0, ...
    'normalize',     'none');  % None: Save non-standardized time-frequency maps
   
end
